# 表达式
# expr ->
#     | expr <Comma> sum_expr
#     | sum_expr

expr -> sum_expr expr_tail
expr_tail ->
    | <Comma> sum_expr expr_tail
    | <empty>

# 加减号
# sum_expr ->
#     | sum_expr <Add> term
#     | sum_expr <Sub> term
#     | term

sum_expr -> term sum_expr_tail
sum_expr_tail ->
    | <Add> term sum_expr_tail
    | <Sub> term sum_expr_tail
    | <empty>

# 乘除号
# term ->
#     | term <Mul> factor
#     | term <Div> factor
#     | factor

term -> factor term_tail
term_tail ->
    | <Mul> factor term_tail
    | <Div> factor term_tail
    | <empty>

factor ->
    | <Id>
    | <Num>
    | <Chr>
    | <Lparbrak> expr <Rparbrak>

type ->
    | <Int>
    | <Float>
    | <Char>
    | <Void>

# 变量声明
# declare ->
#     | type <Id> <Assign> expr
#     | type <Id>

declare -> type <Id> declare_tail
declare_tail ->
      | <Assign> expr
      | <empty>

# stmt ->
#     | <Id> <Assign> expr <Semi>
#     | declare <Semi>
#     | <Return> expr <Semi>
#     | <If> <Lparbrak> expr <Rparbrak> stmt <Else> stmt
#     | <If> <Lparbrak> expr <Rparbrak>
#     | <While> <Lparbrak> expr <Rparbrak> stmt
#     | <Lcurbrak> stmts <Rparbrak>

stmt ->
    | <Id> <Assign> expr <Semi>
    | declare <Semi>
    | <Return> expr <Semi>
    | <If> <Lparbrak> expr <Rparbrak> else_branch
    | <While> <Lparbrak> expr <Rparbrak> stmt
    | <Lcurbrak> stmts <Rparbrak>

else_branch ->
    | <Else> stmt
    | <empty>

stmts ->
    | stmt stmts
    | <empty>

start ->
    | start_tail start
    | <empty>

start_tail ->
    | declare <Semi>
    | func_declare <Lcurbrak> stmts <Rcurbrak>

func_declare -> type <Id> <Lparbrak> func_params <Rparbrak>
func_params ->
    | type <Id> func_params_tail
    | <empty>

func_params_tail ->
    | <Comma> type <Id> func_params_tail
    | <empty>

return_type:: <Int> | <Float> | <Char>
